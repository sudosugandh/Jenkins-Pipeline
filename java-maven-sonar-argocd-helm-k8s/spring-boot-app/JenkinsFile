pipeline {
    agent any
    
    environment {
        DOCKER_SOCKET = "/var/run/docker.sock"
    }
    
    stages {
        stage('Setup') {
            steps {
                script {
                    // Check current ownership and permissions
                    sh "ls -l ${DOCKER_SOCKET}" 
                    
                    // Change ownership of Docker socket
                    sh "sudo chown jenkins:jenkins ${DOCKER_SOCKET}" 
                    
                    // Check if ownership changed
                    sh "ls -l ${DOCKER_SOCKET}"
                    
                    // Ensure that Jenkins user is added to the Docker group
                    sh "sudo usermod -aG docker jenkins"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                sh 'echo passed'
                //git branch: 'main', url: 'https://github.com/sudosugandh/Jenkins-Pipeline/spring-boot-app'
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "sugandhdevops/ultimate-cicd:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "Jenkis-Pipeline/spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins-Pipeline"
                GIT_USER_NAME = "sudosugandh"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "sugandha.xyz@gmail.com"
                        git config user.name "sugandha"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yaml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yaml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
    
    post {
        always {
            // Clean up permissions if needed
            script {
                sh "sudo chown root:root ${DOCKER_SOCKET}"
            }
        }
    }
}
